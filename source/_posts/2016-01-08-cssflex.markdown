---  
layout: post
title: "前端开发之CSS弹性布局flex"
date: 2016-01-08 23:06:08 +0800
comments: true
categories:
---  

>内容来源于网易微专业前端开发工程师课程与个人总结

####[1. Flex布局是什么？](http://www.runoob.com/w3cnote/flex-grammar.html)
Flex是Flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性。  
任何一个容器都可以指定为Flex布局。  
```css
.box{
  display: flex;
}
```  
行内元素也可以使用Flex布局。  
```css
.box{
  display: inline-flex;
}
```  
Webkit内核的浏览器，必须加上-webkit前缀。  
```css
.box{
  display: -webkit-flex; /* Safari */
  display: flex;
}
```  
**注意：**设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。<!--more-->  
####[2. 基本概念]()
采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。  
{% img /images/flex_1.png 500 500 %}   
容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。  
项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 
####[3. 判断子元素是否为flex item？]() 
```html
<div style="display:flex;">
	<div>block</div>/*flex item：yes*/
	<div style="float:left;">float</div>/*flex item：yes*/
	<span>inline</span>/*flex item：yes*/
	<div style="position:absolute;"></div>/*绝对定位脱离文档流。flex item：no*/
	<div>
		<div>grandson</div>/*孙子元素，不是子元素。flex item：no*/
	</div>
</div>
```  
####[4. flex方向]()
####4.1 flex-direction 
```css
.box {
  flex-direction: row | row-reverse | column | column-reverse;
}
```  
{% img /images/flex_2.png %}
####取值  
	row（默认值）：主轴为水平方向，起点在左端。
	row-reverse：主轴为水平方向，起点在右端。
	column：主轴为垂直方向，起点在上沿。
	column-reverse：主轴为垂直方向，起点在下沿。
####示例代码
```css
<body>
	<div class="container container0">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	</div>
	<div class="container container1">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	</div>
	<div class="container container2">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	</div>
	<div class="container container3">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	</div>
</body>
<style>
	.container{margin: 20px;line-height: 40px;font-size: 20px;color: #fff;background-color: #963297;}
	.item{margin: 10px;line-height: 40px;text-align: center;background-color: #c99702;}
	.container0 .item, .container1 .item{padding: 0 12px;}
	.container{display: flex;}
	.container1{flex-direction: row-reverse;}
	.container2{flex-direction: column}
	.container3{flex-direction: column-reverse}
</style>
```
{% img /images/flex_3.jpg 500px 800px %}
####4.2 flex-wrap
```
.box{
  flex-wrap: nowrap | wrap | wrap-reverse;
}
```  
默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。  
{% img /images/flex_4.png 500px 800px %}
####示例代码
```css
<div class="container container0">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	  <div class="item">4</div>
	  <div class="item">5</div>
	</div>
	<div class="container container1">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	  <div class="item">4</div>
	  <div class="item">5</div>
	</div>
	<div class="container container2">
	  <div class="item">1</div>
	  <div class="item">2</div>
	  <div class="item">3</div>
	  <div class="item">4</div>
	  <div class="item">5</div>
	</div>
</body>
<style>
	.container{width: 400px;margin: 20px;line-height: 40px;font-size: 20px;color: #fff;background-color: #963297;}
	.item{margin: 10px;width: 100px;line-height: 40px;text-align: center;background-color: #c99702;}
	.container{display: flex;}
	.container1{flex-wrap: wrap;}
	.container2{flex-wrap: wrap-reverse;}
</style>
```
{% img /images/flex_5.png 500px 800px %}
####4.3 flex-flow
flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。
```css
.box {
  flex-flow: <flex-direction> || <flex-wrap>;
}
```
####4.4 order
order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。
```css
.item {
  order: <integer>;
}
```
{% img /images/flex_6.png 500px 800px %}
####[5. flex弹性]()
####5.1 flex-basis
flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。  
```css
.item {
  flex-basis: <length> | auto; /* default auto */
}
```  
它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。
####5.2 flex-grow
{% img /images/flex_7.png 500px 500px %}  
flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。  
```css
.item {
  flex-grow: <number>; /* default 0 */
}
```
{% img /images/flex_8.png 500px 500px %}  
如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。
```css
<body>
	<div class="container">
	  <div class="item item1">1</div>
	  <div class="item item2">2</div>
	  <div class="item item3">3</div>
	</div>
</body>
<style>
	.item2{flex-grow: 1;}
	.item3{flex-grow: 2;}
	.item2, .item3{flex-basis: 0;}
</style>
```
第三个元素是第二个元素宽度的两倍
####5.3 flex-shrink
flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。  
```css
.item {
  flex-shrink: <number>; /* default 1 */
}
```  
如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
负值对该属性无效。
```css
<body>
	<div class="container">
	  <div class="item item1">sets the flex shrink factor</div>
	  <div class="item item2">sets the flex shrink factor</div>
	  <div class="item item3">sets the flex shrink factor</div>
	</div>
</body>
<style>
.container{display: flex;}
.item{flex-shrink: 0;}
</style>
```
{% img /images/flex_9.png 700px 700px %} 
```css
/*.item{flex-shrink: 0;}*/
/*.item2{flex-shrink: 2;}*/
```
{% img /images/flex_10.png 700px 700px %} 
```css
/*.item{flex-shrink: 0;}*/
.item2{flex-shrink: 2;}
```
{% img /images/flex_11.png 700px 700px %} 
####5.4 flex
flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。
```css
.item {
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}
```
该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。
####[6. flex对齐]()
####6.1 justify-content
justify-content属性定义了项目在主轴上的对齐方式。  
```css
.box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}
```
{% img /images/flex_12.png 600px 600px %}  
 
	flex-start（默认值）：左对齐
	flex-end：右对齐
	center： 居中
	space-between：两端对齐，项目之间的间隔都相等。
	space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

####6.2 align-items
align-items属性定义项目在交叉轴上如何对齐。
```css
.box {
  align-items: flex-start | flex-end | center | baseline | stretch;
}
```
{% img /images/flex_13.png 600px 600px %}
{% img /images/flex_14.png 600px 600px %}  

	flex-start：交叉轴的起点对齐。
	flex-end：交叉轴的终点对齐。
	center：交叉轴的中点对齐。
	baseline: 项目的第一行文字的基线对齐。
	stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
####6.2 align-self
align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
```css
.item {
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
}
```
{% img /images/flex_15.png 600px 600px %}
该属性可能取6个值，除了auto，其他都与align-items属性完全一致。
####6.3 align-content
align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
```css
.box {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}
```
{% img /images/flex_16.png 600px 600px %}

	flex-start：与交叉轴的起点对齐。
	flex-end：与交叉轴的终点对齐。
	center：与交叉轴的中点对齐。
	space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
	space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
	stretch（默认值）：轴线占满整个交叉轴。
####[7. flex三行两列自适应布局]()
```css
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>flex fit layout</title>
	<style>
		html, body{margin: 0;text-align: center;}
		.head, .foot{line-height: 100px;background-color: #000;color: #fff;}
		.side{background-color: yellow;}
		.main{background-color: pink;}
		html, body{height: 100%;}
		body{display: flex;flex-flow: column;}
		.head, .foot{height: 100px;}
		.body{flex: 1;display: flex;}
		.side{width: 200px;}
		.main{flex: 1;}
		.main{margin-left: 10px;}
		.body{width: 960px;align-self: center;}	
	</style>
</head>
<body>
	<div class="head">head</div>
	<div class="body">
		<div class="side">side</div>
		<div class="main">main</div>
	</div>
	<div class="foot">foot</div>
</body>
</html>
```
{% img /images/flex_17.png 600px 600px %}